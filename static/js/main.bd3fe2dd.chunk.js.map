{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.js","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UAEI,qBAAKC,IAAM,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,eACzB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJZC,G,MAAW,SAAAR,GACpB,OAAO,qBAAMC,UAAW,YAAjB,SAECD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAM,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCJpDM,G,KAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAM,SACZF,YAAcA,EACdG,SAAYF,MC8CFG,E,kDA3Cb,aAAc,IAAD,8BACT,gBAeJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfnC,EAAKC,MAAQ,CAETb,SAAU,GACVU,YAAa,IALR,E,qDAYb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAO9H,WACA,IAAD,EACmCC,KAAKN,MAA/Bb,EADT,EACSA,SAAUU,EADnB,EACmBA,YAGXU,EAAmBpB,EAASqB,QAAQ,SAAArB,GAAQ,OAAIA,EAASH,KAAKyB,cAAcC,SAASb,EAAYY,kBAEvG,OACM,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAW,YAAa,kBACbC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAYoB,W,GApCdI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd3fe2dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        \r\n        <img alt = \"monster\" src ={`https://robohash.org/${props.monster.id}?set=set2`}/>\r\n       <h2>{props.monster.name}</h2>\r\n       <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = props => {\r\n    return(<div  className ='card-list'>\r\n        {\r\n            props.monsters.map(monster =>  (<Card key = {monster.id} monster = {monster}/>))\r\n        }\r\n    </div>)\r\n}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type ='search'\r\n     placeholder ={placeholder}\r\n     onChange = {handleChange} />\r\n);","import React, {Component} from 'react';\r\nimport \"./App.css\";\r\nimport {CardList} from './components/card-list/card-list.component';\r\nimport {SearchBox} from './components/search-box/search-box.component';\r\nimport './components/search-box/search-box.style.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n      super();\r\n      this.state = {\r\n        \r\n          monsters: [],\r\n          searchField: ''\r\n      };\r\n      // this keyword defined in constructor, it needs to be done for every func. normally but we don't want it (this.handleChange = this.handleChange.bind(this);)\r\n  } \r\n\r\n  /*Use arrow functions on any class methods you define and aren't part of React (i.e. render(), componentDidMount())\r\n   life cycle method*/\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users=> this.setState({monsters:users}))\r\n  }\r\n// arrow function is defined, no need for binding in the constructor \r\n  handleChange = (e)=> {\r\n    this.setState({searchField: e.target.value})\r\n  }\r\n  // life cycle method\r\n render()\r\n{\r\n  const {monsters, searchField } = this.state;\r\n  /* arama yaparken harf durumu sıkıntı çıkarmamalı\r\n  => represents function*/\r\n  const filteredMonsters = monsters.filter( monsters => monsters.name.toLowerCase().includes(searchField.toLowerCase()));\r\n   \r\n  return (\r\n        <div className=\"App\">\r\n          <h1>Monsters Rolodex</h1>\r\n          <SearchBox \r\n          placeholder ='search monsters' //gives the name of search bar\r\n          handleChange = {this.handleChange}// callback to function with e signature \r\n          />\r\n          <CardList monsters = {filteredMonsters}> \r\n          \r\n          </CardList>\r\n          \r\n        </div>\r\n      );\r\n} \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}